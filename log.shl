#!/bin/sh
#
# LOG.SHL --Shell Library code for logging to stderr/syslog.
#
# Contents:
# log_init()         --Initialise variables used to render stderr messages.
# log_level_number() --Return the numeric code for a log level.
# log_level_name()   --Return the textual name for a log level.
# log_level_color()  --Return the rendering color for a log level.
# log_context()      --Return a "context" line that includes the severity.
# log_msg()          --Log a message to stderr or syslog.
# log_quit()         --Log a message and quit with a failure exit status.
# _priotity_()       --Log a message at the self-named priority.
# trace_priotity_()  --Log a trace message at the self-named priority.
# log_getopts()      --Set the logging options based on variables set by LOG_GETOPTS.
# log_cmd()          --Log a command and then run it.
# log_var()          --Log the value of some variables
#
# Remarks:
# This library provides some customisation over logging facilities that
# allows a program to log to either stderr or syslog, with some filtering
# based on the "log level".
#
# The logging routines add a fair bit of overhead (and utility!) over
# a simple printf/echo.  In practice, it's about 10x slower if nothing
# is printed, and about 50x slower if something is printed.
#
# TODO: failover to syslog if write to file fails...
#

#
# We define some variables here that control the default behaviour
# of the logging system.  Note that they are exported, so that they
# will be honoured by sub-processes.
#
export LOG_OUTPUT=${LOG_OUTPUT:-stderr}
export LOG_LEVEL=${LOG_LEVEL:-notice}
export LOG_FACILITY=${LOG_FACILITY:-user}
export LOG_IDENT=${LOG_IDENT:-${0##*/}}
export LOG_COLORS=${LOG_COLORS:-debug=36:notice=1:warning=1;33:err=1;31:crit=1;33;41:alert=1;5;33;41:emerg=1;5;37;41}
#export LOG_TIMESTAMP; LOG_TIMESTAMP='%b %d %H:%M:%S'

LOG_GETOPTS="q.quiet;v.verbose;_.debug" # Note: not exported!
LOG_PID=$$				# Note: not exported!

#need caller	# TODO: handle this need better...

#
# log_init() --Initialise variables used to render stderr messages.
#
# Output:
# "log_attr_xxx" variable assignments
#
# Remarks:
# The output of log_init is evaled to create variables that control colour.
#
log_init()
{
    local IFS=:			# separate LOG_COLORS delimited by ':'

    for level in $LOG_COLORS; do
	echo "$level" | sed -e 's/^/log_attr_/;s/=/="/;s/$/"/'
    done
}
eval $(log_init)		# apply/import the variable definitions...

#
# log_level_number() --Return the numeric code for a log level.
#
log_level_number()
{
    case $1 in
    0|debug)	log_level_number='0';;
    1|info)	log_level_number='1';;
    2|notice)	log_level_number='2';;
    3|warning)	log_level_number='3';;
    4|err)	log_level_number='4';;
    5|crit)	log_level_number='5';;
    6|alert)	log_level_number='6';;
    7|emerg)	log_level_number='7';;
    *)		log_level_number='7';;
    esac
}

#
# log_level_name() --Return the textual name for a log level.
#
log_level_name()
{
    case $1 in
    0|debug)	log_level_name='debug';;
    1|info)	log_level_name='info';;
    2|notice)	log_level_name='notice';;
    3|warning)	log_level_name='warning';;
    4|err)	log_level_name='err';;
    5|crit)	log_level_name='crit';;
    6|alert)	log_level_name='alert';;
    7|emerg)	log_level_name='emerg';;
    *)		log_level_name='unknown';;
    esac
}

#
# log_level_color() --Return the rendering color for a log level.
#
# Remarks:
# The rendering colour variables are created (via eval!) in log_init().
#
log_level_color()
{
    case $1 in
    7|emerg)	log_level_color="$log_attr_emerg";;
    6|alert)	log_level_color="$log_attr_alert";;
    5|crit)	log_level_color="$log_attr_crit";;
    4|err)	log_level_color="$log_attr_err";;
    3|warning)	log_level_color="$log_attr_warning";;
    2|notice)	log_level_color="$log_attr_notice";;
    1|info)	log_level_color="$log_attr_info";;
    0|debug)	log_level_color="$log_attr_debug";;
    esac
}

#
# log_context() --Return a "context" line that includes the severity.
#
# Parameter:
# $1	--the severity
#
# Remarks:
# This only works for bash!
#
log_context()
{
    caller 2 | sed -e "s/\([^ ]*\) *\([^ ]*\) *\(.*\)/\2:\3:\1: $1:/"
}

#
# log_msg() --Log a message to stderr or syslog.
#
# Parameters:
# $1	--the priority at which to log
# ...	--the message as printf(1) arguments
#
# Remarks:
# In addition to printing the message, this code adds some prefix
# information to make the output a little more consistent and easy
# to process.  In particular, the priority of the message is printed,
# with a prefix that can include the date of the message.
#
# Note that to simulate syslog's date format, set LOG_TIMESTAMP
# to '%b %d %H:%M:%S'.
#
# TODO: add support of logger(1)-style stdin handling
#
log_msg()
{
    local log_level_name= log_level_number= log_level_color=
    local log_prefix= log_msg=

    log_level_number "$LOG_LEVEL"
    current_log_level="$log_level_number"
    log_level_number "$1"

    if [ "$log_level_number" -lt "$current_log_level" ]; then
	return;
    fi

    log_level_name "$1"; shift

    if [ "$1" = '-c' ]; then
	shift;				# provide developer context
	log_prefix="$(log_context "$log_level_name")"
    fi
    if [ ! "$log_prefix" ]; then
	log_prefix="$log_level_name:"
    fi

    if [ $# -eq 1 ]; then
	log_msg="$1"
    else
	log_msg=$(printf "$@")
    fi

    local IFS=:
    local output=
    for output in $LOG_OUTPUT; do
	case "$output" in
        syslog)
	    logger -t "${LOG_IDENT}[$LOG_PID]" \
		-p "${LOG_FACILITY}.${log_priority}" "$log_msg"
	    ;;
	stderr)			# stderr, with colours
	    log_prefix="$LOG_IDENT $log_prefix"
	    if [ "$LOG_TIMESTAMP" ]; then
		log_prefix="$(date "+$LOG_TIMESTAMP") $log_prefix"
	    fi
	    if [ -t 2 ]; then	# stderr is a (colourful) tty
		log_level_color "$log_level_number"
	    fi
	    if [ "$log_level_color" ]; then
		printf "\033[%sm%s\033[m\n" \
		    "$log_level_color" "$log_prefix $log_msg" >&2
	    else
		echo "$log_prefix $log_msg" >&2
	    fi
	    ;;
	xterm)			# display in xterm window title
	    printf "\033]0;%s\007" "$log_msg" >/dev/tty # icon+title
	    ;;
	notify)			# Mac OSX notification centre
	    osascript \
		-e "display notification \"$log_msg\" with title \"$LOG_IDENT\" subtitle \"$log_priority\""
	    ;;
	esac
    done
}

#
# log_quit() --Log a message and quit with a failure exit status.
#
log_quit()
{
    log_msg err "$@"
    exit 1
}

#
# _priotity_() --Log a message at the self-named priority.
#
emerg()   { log_msg emerg   "$@"; }
alert()   { log_msg alert   "$@"; }
crit()    { log_msg crit    "$@"; }
err()     { log_msg err     "$@"; }
warning() { log_msg warning "$@"; }
notice()  { log_msg notice  "$@"; }
info()    { log_msg info    "$@"; }
debug()   { log_msg debug   "$@"; }

#
# trace_priotity_() --Log a trace message at the self-named priority.
#
# Remarks:
# A "trace" message shows the caller's context, sometimes useful
# for development/debugging.
#
trace_emerg()   { log_msg emerg -c   "$@"; }
trace_alert()   { log_msg alert -c   "$@"; }
trace_crit()    { log_msg crit -c    "$@"; }
trace_err()     { log_msg err -c     "$@"; }
trace_warning() { log_msg warning -c "$@"; }
trace_notice()  { log_msg notice -c  "$@"; }
trace_info()    { log_msg info -c    "$@"; }
trace_debug()   { log_msg debug -c   "$@"; }

#
# log_getopts() --Set the logging options based on variables set by LOG_GETOPTS.
#
# Remarks:
# This routine assumes that script-variables have been set via the getopts
# system, using the LOG_GETOPTS definition.
#
log_getopts()
{
    if [ "$quiet" ];   then LOG_LEVEL=warning; fi
    if [ "$verbose" ]; then LOG_LEVEL=info; fi
    if [ "$debug" ];   then LOG_LEVEL=debug; fi
    if [ "$log_level" ];   then LOG_LEVEL="$log_level"; fi

}

#
# log_cmd() --Log a command and then run it.
#
log_cmd()
{
    local IFS=' '
    debug "exec: $*"; "$@"
}

#
# log_var() --Log the value of some variables
#
log_var()
{
    for var; do
	debug '%s: "%s"' "$var" "$(eval "echo \$$var")"
    done
}
